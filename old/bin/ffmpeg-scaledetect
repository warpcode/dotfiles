#!/usr/bin/env python

import argparse
import os
import re
import subprocess
import sys

def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Using a bounding box, calculate the frame size for a video')
    parser.add_argument("input", help="Location of the video")
    parser.add_argument("-mw", "--max-width", type=int, help="Set the maximum width")
    parser.add_argument("-mh", "--max-height", type=int, help="Set the maximum height")
    parser.add_argument("-s", "--seperator", type=str, help="Set the width and height seperator", default=":")
    args = parser.parse_args()

    probe_executable = which('avprobe')
    if not probe_executable:
        probe_executable = which('ffprobe')
        
    if not probe_executable:
        print('cannot find avprobe or ffprobe');
        sys.exit(1)
    
    #make sure we can process the file
    try:
        output = subprocess.check_output([probe_executable, args.input], stderr=subprocess.STDOUT)
    except Exception, e:
        print('Invalid file detected');
        sys.exit(1)
        
    pattern = re.compile(r'Stream.*?Video.*?([0-9]{1,})x([0-9]{3,}).*?DAR ([0-9]+):([0-9]+)')
    width = height = ratio_width = ratio_height = 0
    for line in output.split('\n'):
        if line.find("Stream") > -1 and line.find("Video") > -1:
            match = pattern.search(line)
            if match:
                width, height, ratio_width, ratio_height = match.groups()[0:4]
            break
    
    
    if width < 1 or height < 1:
        print "Could not determine width or height of the video"
        sys.exit(1)
    
    width = float(width)
    height = float(height)
    ratio_width = float(ratio_width)
    ratio_height = float(ratio_height)
    
    ratio = ratio_width/ratio_height
    if ratio > 1:
        final_width = width
        final_height = width/ratio
    else:
        final_height = height
        final_width = height/ratio
        
    if args.max_width:
        max_width=float(args.max_width)
    else:
        max_width=final_width
        
    if args.max_height:
        max_height=float(args.max_height)
    else:
        max_height=final_height
        
    
    output_width = int(final_width*min([max_width/final_width, max_height/final_height]))
    output_height = int(final_height*min([max_width/final_width, max_height/final_height]))
    
    print str(output_width)+args.seperator+str(output_height)